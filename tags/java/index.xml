<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on 邵晨峰的博客</title>
    <link>http://shaochenfeng.com/tags/java/</link>
    <description>Recent content in java on 邵晨峰的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&lt;a href=&#34;https://beian.miit.gov.cn/&#34; target=&#34;_blank&#34;&gt;冀ICP备18002899号&lt;/a&gt;    &amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 21 May 2021 21:14:24 +0000</lastBuildDate>
    
        <atom:link href="http://shaochenfeng.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>javaExecutor线程池案例</title>
        <link>http://shaochenfeng.com/blog/javaexecutor%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A1%88%E4%BE%8B/</link>
        <pubDate>Fri, 21 May 2021 21:14:24 +0000</pubDate>
        
        <guid>http://shaochenfeng.com/blog/javaexecutor%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A1%88%E4%BE%8B/</guid>
        <description>第一个例子：基础案例 自动控制线程的数量，且每个线程没有返回值，不能做最后的整合处理 第二个例子：进阶案例 固定线程的数量，每个线程有返回值，在左</description>
      </item>
      
      <item>
        <title>Java遍历数组、List、Set、Map的种种方法</title>
        <link>http://shaochenfeng.com/blog/java%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84listsetmap%E7%9A%84%E7%A7%8D%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
        <pubDate>Fri, 21 May 2021 21:09:27 +0000</pubDate>
        
        <guid>http://shaochenfeng.com/blog/java%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84listsetmap%E7%9A%84%E7%A7%8D%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
        <description>数组或list的遍历 double[] nums = new double[n]; for遍历 for(int i=0;i&amp;lt;nums.length;i++) { result += nums[i]; } for-each遍历 for(double item : nums) { result += item; } lambda表达式 items.forEach(item-&amp;gt;{ if(&amp;#34;C&amp;#34;.equals(item)){ ​ System.out.println(item); } }); 直接引用函数 items.forEach(System.out::println); se</description>
      </item>
      
      <item>
        <title>Java各种文件的读写和文件夹遍历方法</title>
        <link>http://shaochenfeng.com/blog/java%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%86%99%E9%81%8D%E5%8E%86/</link>
        <pubDate>Fri, 21 May 2021 21:06:41 +0000</pubDate>
        
        <guid>http://shaochenfeng.com/blog/java%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%86%99%E9%81%8D%E5%8E%86/</guid>
        <description>读取文本文件 import java.io.BufferedReader; import java.io.FileInputStream; import java.io.InputStreamReader; import java.util.HashMap; public class TxtFileRead { public static void main(String[] args) { readFile1(); System.out.println(&amp;#34;===================&amp;#34;); //readFile2(); //JDK 7及以上才可以使用 } public static void readFile1() { FileInputStream fis = null; InputStreamReader isr = null; BufferedReader br = null; try { fis = new FileInputStream(&amp;#34;c:/temp/abc.txt&amp;#34;); // 节点类 isr = new InputStreamReader(fis, &amp;#34;UTF-8&amp;#34;);</description>
      </item>
      
      <item>
        <title>Java 读写GBK编码的文件</title>
        <link>http://shaochenfeng.com/blog/java-%E8%AF%BB%E5%86%99gbk%E7%BC%96%E7%A0%81%E7%9A%84%E6%96%87%E4%BB%B6/</link>
        <pubDate>Thu, 20 May 2021 23:38:38 +0000</pubDate>
        
        <guid>http://shaochenfeng.com/blog/java-%E8%AF%BB%E5%86%99gbk%E7%BC%96%E7%A0%81%E7%9A%84%E6%96%87%E4%BB%B6/</guid>
        <description>以GBK编码某个读写文件 读入: BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(&amp;#34;a.txt&amp;#34;), Charset.forName(&amp;#34;GBK&amp;#34;))); String str = br.readLine(); br.close(); 写出: BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(&amp;#34;a.txt&amp;#34;), Charset.forName(&amp;#34;GBK&amp;#34;))); bw.write(&amp;#34;hello&amp;#34;); bw.flush(); bw.close(); 使用try-with-resource语法确保close</description>
      </item>
      
      <item>
        <title>2020年Spring所有官方项目介绍</title>
        <link>http://shaochenfeng.com/blog/2020%E5%B9%B4spring%E6%89%80%E6%9C%89%E5%AE%98%E6%96%B9%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Sun, 01 Mar 2020 10:01:35 +0800</pubDate>
        
        <guid>http://shaochenfeng.com/blog/2020%E5%B9%B4spring%E6%89%80%E6%9C%89%E5%AE%98%E6%96%B9%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;p&gt;从可配置性到安全性，从Web应用程序到大数据开发，无论您的应用程序需要什么样的基础框架，都有一个 Spring项目 可以帮助您构建它。从小着手并按需使用，因为Spring是为模块化设计的。&lt;/p&gt;
&lt;p&gt;——来自官网&lt;/p&gt;
&lt;p&gt;文章主要翻译自spring官方的项目介绍 &lt;a href=&#34;https://spring.io/projects&#34;&gt;https://spring.io/projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中没翻译的就是我不知道怎么翻译比较好，看英文吧&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>Centos8(7)安装tomcat9和常见用法</title>
        <link>http://shaochenfeng.com/blog/centos87%E5%AE%89%E8%A3%85tomcat9%E5%92%8C%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</link>
        <pubDate>Wed, 19 Feb 2020 13:57:03 +0800</pubDate>
        
        <guid>http://shaochenfeng.com/blog/centos87%E5%AE%89%E8%A3%85tomcat9%E5%92%8C%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</guid>
        <description>1.安装jdk tomcat9可以工作在jdk8及之后的版本 所以可以安装jdk8或是jdk11 dnf install java-11-openjdk # centos8 yum install java-11-openjdk # centos7 2.下载最新的tomcat二</description>
      </item>
      
    
  </channel>
</rss>